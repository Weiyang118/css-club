{
  "Round Buttons": {
    "title": "Round Buttons",
    "icon": "fas fa-hand-pointer",
    "description": "用于触发操作的基础按钮组件，支持多种颜色主题和大小。",
    "demo": "./assets/files/round-button.html",
    "code": {
        "html": "<div class=\"btn messenger\">\n  <div><i class=\"bi bi-messenger\"></i></div>\n</div>\n<div class=\"btn facebook\">\n  <div><i class=\"bi bi-facebook\"></i></div>\n</div>\n<div class=\"btn x\">\n  <div><i class=\"bi bi-twitter-x\"></i></div>\n</div>",
        "css": "body {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n  height: 100vh;\n  background-color: #ecf0f1;\n}\n\n.round-btn {\n  margin: 20px;\n  text-align: center;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 0;\n  cursor: pointer;\n  width: 100px;\n  height: 50px;\n  color: white;\n}\n\n.round-btn div {\n  transform: rotateX(45deg);\n  font-size: 33px;\n}\n\n.messenger {\n  box-shadow: 0px 5px #c94c8c, 0px 10px #c94c8c, 0px 15px #c94c8c, 0px 20px #c94c8c, 0px 25px #c94c8c;\n  background-image: linear-gradient(45deg, #ff7161 0%, #c13ad5 100%);\n}\n\n.facebook {\n  box-shadow: 0px 5px #004298, 0px 10px #004298, 0px 15px #004298, 0px 20px #004298, 0px 25px #004298;\n  background-color: #1877f2;\n}\n\n.x {\n  box-shadow: 0px 5px #000, 0px 10px #000, 0px 15px #000, 0px 20px #000, 0px 25px #000;\n  background-color: #292929;\n}"
    }
  },
  "effects-slider-particles": {
  "title": "Effects Sliderarticles",
  "icon": "fas fa-sliders-h",
  "description": "带有金色粒子动画的自定义滑块组件，交互时会触发粒子爆炸效果，适用于游戏或高亮视觉效果展示。",
  "demo": "./assets/files/particle-slider.html",
  "code": {
    "html": "<canvas id=\"particleCanvas\"></canvas>\n<div class=\"slider-container\">\n  <div class=\"value-bubble\" id=\"bubble\">50</div>\n  <input type=\"range\" id=\"slider\" min=\"0\" max=\"100\" value=\"50\">\n</div>",
    "css": "body {\n  background: #0b0c10;\n  margin: 0;\n  overflow: hidden;\n  font-family: 'Segoe UI', sans-serif;\n}\n\n#particleCanvas {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 0;\n  pointer-events: none;\n}\n\n.slider-container {\n  position: absolute;\n  bottom: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n  width: 80%;\n  max-width: 500px;\n  z-index: 2;\n}\n\ninput[type=range] {\n  width: 100%;\n  height: 16px;\n  appearance: none;\n  background: linear-gradient(90deg, gold, orange);\n  border-radius: 8px;\n  outline: none;\n  box-shadow: 0 0 15px gold;\n}\n\ninput[type=range]::-webkit-slider-thumb {\n  appearance: none;\n  width: 26px;\n  height: 26px;\n  background: white;\n  border-radius: 50%;\n  box-shadow: 0 0 10px gold, 0 0 30px orange;\n  transition: transform 0.2s ease;\n}\n\ninput[type=range]:active::-webkit-slider-thumb {\n  transform: scale(1.2);\n}\n\n.value-bubble {\n  position: absolute;\n  top: -50px;\n  left: 50%;\n  transform: translateX(-50%);\n  background: gold;\n  color: black;\n  padding: 8px 14px;\n  border-radius: 20px;\n  font-size: 18px;\n  font-weight: bold;\n  box-shadow: 0 0 10px gold;\n  pointer-events: none;\n}",
    "js": "const canvas = document.getElementById('particleCanvas');\nconst ctx = canvas.getContext('2d');\nlet particles = [];\n\nfunction resizeCanvas() {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n}\nresizeCanvas();\nwindow.addEventListener('resize', resizeCanvas);\n\nclass Particle {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.size = Math.random() * 4 + 2;\n    this.speedX = (Math.random() - 0.5) * 6;\n    this.speedY = (Math.random() - 0.5) * 6;\n    this.alpha = 1;\n  }\n\n  update() {\n    this.x += this.speedX;\n    this.y += this.speedY;\n    this.alpha -= 0.02;\n  }\n\n  draw() {\n    ctx.fillStyle = `rgba(255, 215, 0, ${this.alpha})`;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n    ctx.fill();\n  }\n}\n\nfunction animateParticles() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  for (let i = particles.length - 1; i >= 0; i--) {\n    const p = particles[i];\n    p.update();\n    p.draw();\n    if (p.alpha <= 0) {\n      particles.splice(i, 1);\n    }\n  }\n  requestAnimationFrame(animateParticles);\n}\nanimateParticles();\n\nfunction emitParticles(x, y) {\n  for (let i = 0; i < 20; i++) {\n    particles.push(new Particle(x, y));\n  }\n}\n\nconst slider = document.getElementById(\"slider\");\nconst bubble = document.getElementById(\"bubble\");\n\nfunction setBubble(slider, bubble) {\n  const val = slider.value;\n  const min = slider.min ? slider.min : 0;\n  const max = slider.max ? slider.max : 100;\n  const newVal = Number(((val - min) * 100) / (max - min));\n  bubble.innerHTML = val;\n  bubble.style.left = `calc(${newVal}% + (${8 - newVal * 0.15}px))`;\n\n  const rect = slider.getBoundingClientRect();\n  const x = rect.left + (rect.width * newVal / 100);\n  const y = rect.top + rect.height / 2;\n  emitParticles(x, y);\n}\n\nslider.addEventListener(\"input\", () => {\n  setBubble(slider, bubble);\n});\n\nwindow.addEventListener(\"load\", () => {\n  setBubble(slider, bubble);\n});"
  }
},
  "liquid-button": {
    "title": "Liquid Button",
    "icon": "fas fa-id-card",
    "description": "灵活的内容容器，可以包含各种内容和操作。",
    "demo": "./assets/files/liquid-button.html",
    "code": {
        "html": "<div class=\"container\">\n  <button class=\"btn-liquid\" id=\"liquidBtn\">\n    <span>Liquid Button</span>\n  </button>\n</div>",
        "css": "* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n\n\nbody {\nbackground: linear-gradient(135deg, #04364f 0%, #0b60a9 50%, #062d63 100%);\nmin-height: 100vh;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nfont-family: 'Arial', sans-serif;\noverflow: hidden;\n}\n\n\n.container {\nposition: relative;\nwidth: 100vw;\nheight: 100vh;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}\n\n\n.btn-liquid {\nposition: relative;\nwidth: 200px;\nheight: 60px;\ncursor: pointer;\nborder: none;\nbackground: transparent;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nz-index: 10;\n}\n\n\n.btn-liquid canvas {\nposition: absolute;\ntop: -50px;\nleft: -50px;\npointer-events: none;\n}\n\n\n.btn-liquid span {\nposition: relative;\nz-index: 20;\ncolor: white;\nfont-size: 18px;\nfont-weight: 900;\ntext-shadow: 0 2px 4px rgba(0,0,0,0.3);\npointer-events: none;\n}\n\n\n.droplet {\nposition: absolute;\nwidth: 8px;\nheight: 8px;\nbackground: linear-gradient(45deg, #00d4ff, #007aff);\nborder-radius: 50% 50% 50% 0;\npointer-events: none;\nz-index: 1;\nbox-shadow: 0 2px 8px rgba(0, 212, 255, 0.5);\n}\n\n\n@keyframes dropfall {\n0% {\ntransform: translateY(0) rotate(0deg);\nopacity: 1;\n}\n100% {\ntransform: translateY(100vh) rotate(360deg);\nopacity: 0;\n}\n}",
        "js": "let pointsA = [];\nlet pointsB = [];\nlet canvas = null;\nlet context = null;\nlet button = null;\nlet buttonRect = null;\n\n\nconst points = 40;\nconst viscosity = 15;\nconst mouseDist = 80;\nconst damping = 0.08;\n\n\nlet mouseX = 0;\nlet mouseY = 0;\nlet relMouseX = 0;\nlet relMouseY = 0;\nlet mouseLastX = 0;\nlet mouseLastY = 0;\nlet mouseDirectionX = 0;\nlet mouseDirectionY = 0;\nlet mouseSpeedX = 0;\nlet mouseSpeedY = 0;\n\n\nfunction mouseDirection(e) {\nif (mouseX < e.pageX) mouseDirectionX = 1;\nelse if (mouseX > e.pageX) mouseDirectionX = -1;\nelse mouseDirectionX = 0;\n\n\nif (mouseY < e.pageY) mouseDirectionY = 1;\nelse if (mouseY > e.pageY) mouseDirectionY = -1;\nelse mouseDirectionY = 0;\n\n\nmouseX = e.pageX;\nmouseY = e.pageY;\n\n\nif (buttonRect) {\nrelMouseX = mouseX - buttonRect.left + 50;\nrelMouseY = mouseY - buttonRect.top + 50;\n}\n}\n\n\nfunction mouseSpeed() {\nmouseSpeedX = mouseX - mouseLastX;\nmouseSpeedY = mouseY - mouseLastY;\nmouseLastX = mouseX;\nmouseLastY = mouseY;\nsetTimeout(mouseSpeed, 50);\n}\n\n\nfunction Point(x, y, level) {\nthis.x = this.ix = 50 + x;\nthis.y = this.iy = 50 + y;\nthis.vx = 0;\nthis.vy = 0;\nthis.level = level;\n}\n\n\nPoint.prototype.move = function() {\nthis.vx += (this.ix - this.x) / (viscosity * this.level);\nthis.vy += (this.iy - this.y) / (viscosity * this.level);\n\n\nconst dx = this.ix - relMouseX;\nconst dy = this.iy - relMouseY;\nconst relDist = Math.max(0, 1 - Math.sqrt((dx * dx) + (dy * dy)) / mouseDist);\n\n\nif ((mouseDirectionX > 0 && relMouseX > this.x) || (mouseDirectionX < 0 && relMouseX < this.x)) {\nif (relDist > 0) {\nthis.vx += (mouseSpeedX / 3) * relDist;\n}\n}\nthis.vx *= (1 - damping);\nthis.x += this.vx;\n\n\nif ((mouseDirectionY > 0 && relMouseY > this.y) || (mouseDirectionY < 0 && relMouseY < this.y)) {\nif (relDist > 0) {\nthis.vy += (mouseSpeedY / 3) * relDist;\n}\n}\nthis.vy *= (1 - damping);\nthis.y += this.vy;\n\n\nconst buttonWidth = 250;\nconst buttonHeight = 60;\nconst cornerRadius = buttonHeight / 2;\nconst margin = 20;\n\n\nif (this.iy <= 5) {\nthis.y = Math.max(this.y, this.iy - margin);\nthis.y = Math.min(this.y, buttonHeight - margin);\n} else if (this.iy >= buttonHeight - 5) {\nthis.y = Math.min(this.y, this.iy + margin);\nthis.y = Math.max(this.y, margin);\n} else if (this.ix <= cornerRadius + 5) {\nthis.x = Math.max(this.x, this.ix - margin);\nthis.x = Math.min(this.x, buttonWidth - margin);\n} else if (this.ix >= buttonWidth - cornerRadius - 5) {\nthis.x = Math.min(this.x, this.ix + margin);\nthis.x = Math.max(this.x, margin);\n}\n\n\nthis.x = Math.max(5, Math.min(this.x, buttonWidth + 45));\nthis.y = Math.max(5, Math.min(this.y, buttonHeight + 45));\n};\n\n\nfunction addPoints(x, y) {\npointsA.push(new Point(x, y, 1));\npointsB.push(new Point(x, y, 1.5));\n}\n\n\nfunction initButton() {\nbutton = document.getElementById('liquidBtn');\n\n\nif (!button) {\nconsole.error('按钮元素未找到');\nreturn;\n}\n\n\nconst buttonWidth = 200;\nconst buttonHeight = 60;\n\n\ncanvas = document.createElement('canvas');\ncanvas.width = buttonWidth + 100;\ncanvas.height = buttonHeight + 100;\ncontext = canvas.getContext('2d');\nbutton.appendChild(canvas);\n\n\nconst cornerRadius = buttonHeight / 2;\n\n\nconst topPoints = Math.floor(points * 0.3);\nconst rightPoints = Math.floor(points * 0.2);\nconst bottomPoints = Math.floor(points * 0.3);\nconst leftPoints = points - topPoints - rightPoints - bottomPoints;\n\n\nconst straightWidth = buttonWidth - buttonHeight;\nfor (let i = 0; i < topPoints; i++) {\nconst x = cornerRadius + (straightWidth * i) / (topPoints - 1);\naddPoints(x, 0);\n}\n\n\nfor (let i = 0; i < rightPoints; i++) {\nconst angle = -Math.PI / 2 + (Math.PI * i) / (rightPoints - 1);\nconst x = buttonWidth - cornerRadius + Math.cos(angle) * cornerRadius;\nconst y = cornerRadius + Math.sin(angle) * cornerRadius;\naddPoints(x, y);\n}\n\n\nfor (let i = 0; i < bottomPoints; i++) {\nconst x = buttonWidth - cornerRadius - (straightWidth * i) / (bottomPoints - 1);\naddPoints(x, buttonHeight);\n}\n\n\nfor (let i = 0; i < leftPoints; i++) {\nconst angle = Math.PI / 2 + (Math.PI * i) / (leftPoints - 1);\nconst x = cornerRadius + Math.cos(angle) * cornerRadius;\nconst y = cornerRadius + Math.sin(angle) * cornerRadius;\naddPoints(x, y);\n}\n\n\nupdateButtonRect();\n\n\nrenderCanvas();\n}\n\n\nfunction updateButtonRect() {\nif (button) {\nbuttonRect = button.getBoundingClientRect();\n}\n}\n\n\nfunction renderCanvas() {\nrequestAnimationFrame(renderCanvas);\n\n\ncontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\nfor (let i = 0; i < pointsA.length; i++) {\npointsA[i].move();\npointsB[i].move();\n}\nconst gradientX = Math.max(0, Math.min(relMouseX, canvas.width));\nconst gradientY = Math.max(0, Math.min(relMouseY, canvas.height));\n\n\nconst gradient = context.createRadialGradient(\ngradientX, gradientY, 0,\ngradientX, gradientY, 150\n);\ngradient.addColorStop(0, '#00d4ff');\ngradient.addColorStop(1, '#007aff');\n\n\nconst groups = [pointsA, pointsB];\n\n\nfor (let j = 0; j < groups.length; j++) {\nconst points = groups[j];\n\n\nif (j === 0) {\ncontext.fillStyle = 'rgba(0, 212, 255, 0.8)';\n} else {\ncontext.fillStyle = gradient;\n}\n\n\ncontext.beginPath();\n\n\nif (points.length > 0) {\ncontext.moveTo(points[0].x, points[0].y);\n\n\nfor (let i = 0; i < points.length; i++) {\nconst current = points[i];\nconst next = points[(i + 1) % points.length];\nconst nextNext = points[(i + 2) % points.length];\n\n\nconst cp1x = current.x + (next.x - points[(i - 1 + points.length) % points.length].x) * 0.1;\nconst cp1y = current.y + (next.y - points[(i - 1 + points.length) % points.length].y) * 0.1;\nconst cp2x = next.x - (nextNext.x - current.x) * 0.1;\nconst cp2y = next.y - (nextNext.y - current.y) * 0.1;\n\n\ncontext.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, next.x, next.y);\n}\n}\n\n\ncontext.closePath();\ncontext.fill();\n\n\nif (j === 1) {\ncontext.shadowColor = '#00d4ff';\ncontext.shadowBlur = 20;\ncontext.fill();\ncontext.shadowBlur = 0;\n}\n}\n}\n\n\nfunction createDroplets(startX, startY) {\nconst dropletCount = Math.random() * 4 + 2;\n\n\nfor (let i = 0; i < dropletCount; i++) {\nsetTimeout(() => {\nconst droplet = document.createElement('div');\ndroplet.className = 'droplet';\n\n\nconst offsetX = (Math.random() - 0.5) * 40;\nconst offsetY = (Math.random() - 0.5) * 20;\n\n\ndroplet.style.left = startX + offsetX + 'px';\ndroplet.style.top = startY + offsetY + 'px';\n\n\nconst size = Math.random() * 4 + 4;\ndroplet.style.width = droplet.style.height = size + 'px';\n\n\nconst fallDuration = Math.random() * 2 + 2;\ndroplet.style.animation = `dropfall ${fallDuration}s ease-in forwards`;\n\n\ndocument.body.appendChild(droplet);\n\n\nsetTimeout(() => {\ndroplet.remove();\n}, fallDuration * 1000);\n}, i * 100);\n}\n}\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\nmouseSpeed();\ninitButton();\n\n\ndocument.addEventListener('mousemove', mouseDirection);\nwindow.addEventListener('resize', updateButtonRect);\n\n\nif (button) {\nbutton.addEventListener('click', (e) => {\ncreateDroplets(e.pageX, e.pageY);\n});\n}\n});\n\n\ndocument.addEventListener('mousemove', (e) => {\nconst mouseX = e.clientX / window.innerWidth;\nconst mouseY = e.clientY / window.innerHeight;\n\n\nconst hueStart = 210 + mouseX * 10;\nconst hueEnd = 230 + mouseY * 5;\nconst lightStart = 30 + mouseY * 10;\nconst lightEnd = 25 + mouseX * 10;\n\n\ndocument.body.style.background = `\nlinear-gradient(${130 + mouseX * 20}deg,\nhsl(${hueStart}, 60%, ${lightStart}%) 0%,\nhsl(${hueEnd}, 60%, ${lightEnd}%) 100%)\n`;\n});"
    }
  }
}
